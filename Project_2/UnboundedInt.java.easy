
import java.math.BigInteger;

public class UnboundedInt implements Cloneable {
    private int sign, numNodes;
    private IntNode head, tail, cursor;

    public UnboundedInt(BigInteger b) {
        this(b.toString());
    }

    public UnboundedInt(String input) {
        // sanitize input String to avoid NumberFormatException

        // assume sign is positive
        this.sign = 1;

        // start with no linked list
        this.head = null;

        // check if negative sign at start of input, set sign accordingly
        if (input.charAt(0) == '-')
            this.sign = -1;

        // use regex to remove all non-digits from input
        // (no scientific notation, kthxbai)
        input = input.replaceAll("[^\\d]+", "");

        int len = input.length();

        // if the string is empty, then no digits were in the input
        if (len == 0)
            throw new NumberFormatException("String must contain one or more digits");

        // each node contains a 3-digit number 0-999:
        // if we take the input string's length, divide by 3,
        // and ceil the result, that will give us the number of nodes needed
        this.numNodes = (int)Math.ceil(((double)len)/3);
        String nodeStr;
        int nodeInt;
        int n = 0;
        IntNode prevNode = null;
        IntNode newNode = null;

        // now we need to loop through the input string BACKWARDS
        // this is because the ones place starts at the end of the string (rightmost char)
        // use i to loop backwards through the input string, hopping 3 digits each iteration
        // create a new node each iteration of i
        for (int i=len-1; i>-1; i-=3) {
            // create a char[] to hold this node's value in string format, default=000
            char[] digit = {'0', '0', '0'};

            // loop through i-2, i-1, i-0 (in that order)
            // loop j through 2, 1, 0 (in that order)
            // so k = i-j will give us the index in the input string for the current digit
            for (int j=2; j>-1; j--) {
                // current digit's index in the original input string
                int k = i-j;
                // if k is negative, we're past the end (leftmost char) of the input string
                if (k < 0)
                    continue;

                // otherwise, if k is positive, overwrite the digit in the char[]
                // the digit we should overwrite is at index 2-j
                digit[2-j] = input.charAt(k);
            }

            // create a string from the char[]
            nodeStr = new String(digit);
            // parse the integer value from the string
            nodeInt = Integer.parseInt(nodeStr);
            // finally, create a node using the parsed integer value
            newNode = new IntNode(nodeInt, null);
            if (prevNode == null) {
                // if this is the first node we're creating (prevNode null)
                // then maintain a reference to this newNode as the tail
                this.tail = newNode;
            } else {
                // otherwise set this newNode to point to the prevNode
                newNode.setLink(prevNode);
            }

            // set prevNode to the newNode, then continue to next iteration
            prevNode = newNode;
        }

        this.head = prevNode;
    }

    /**
     * Loop through IntNodes and concatenate values together to form complete numeric string
     * representing the number encapsulated by this UnboundedInt.
     *
     * @param none
     * @return
     *   String containing number encapsulated by this UnboundedInt
     */
    public String toString() {
        IntNode curNode = this.head;
        // head node should be rendered without left-padded zeros
        String out = String.format("%d", curNode.getData());
        curNode = this.head.getLink();
        while (curNode != null) {
            // left-pad with zeros so length is always 3 digits
            out = out + String.format("%03d", curNode.getData());
            curNode = curNode.getLink();
        }

        if (sign == -1)
            out = "-" + out;

        return out;
    }

    public void start() {
        this.cursor = this.head;
    }

    public void advance() {
        if (this.cursor == null)
            throw new IllegalStateException("Cursor is null (not pointing to an IntNode)");

        this.cursor = this.cursor.getLink();
    }

    public int getNodeValue() {
        if (this.cursor == null)
            throw new IllegalStateException("Cursor is null (not pointing to an IntNode)");

        return this.cursor.getData();
    }

    public UnboundedInt clone() {
        return new UnboundedInt(this.toString());
    }

    public static BigInteger toBigInteger(UnboundedInt u) {
        return new BigInteger(u.toString());
    }

    public static UnboundedInt fromBigInteger(BigInteger b) {
        return new UnboundedInt(b.toString());
    }

    public BigInteger toBigInteger() {
        return new BigInteger(this.toString());
    }

    public UnboundedInt add(UnboundedInt a) {
        BigInteger result = this.toBigInteger().add(a.toBigInteger());
        return new UnboundedInt(result);
    }

    public UnboundedInt multiply(UnboundedInt m) {
        BigInteger result = this.toBigInteger().multiply(m.toBigInteger());
        return new UnboundedInt(result);
    }

    public boolean equals(Object o) {
        if (o instanceof UnboundedInt) {
            UnboundedInt u = (UnboundedInt)o;
            if (this.toBigInteger().equals(u.toBigInteger()))
                return true;
            return false;
        } else if (o instanceof BigInteger) {
            BigInteger b = (BigInteger)o;
            if (this.toBigInteger().equals(b))
                return true;
            return false;
        }
        return false;
    }


}